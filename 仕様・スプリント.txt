# Guild of Merchants — 仕様・TODO・スプリントログ

## 概要

* 目的：交易（生産/消費→価格変動）とNPC/プレイヤーの移動・売買ループで世界が自走する土台を作る。
* エンジン：Godot 4.3（GDScript）
* データ：CSV（UTF-8）

---

## システム構成

* **World（res://scripts/world.gd）**

  * CSV読込、都市/商品/在庫/価格、日次更新、NPCロジック、プレイヤーAPI、都市金庫管理、速度/ポーズ。
* **MapLayer（res://scripts/map_layer.gd）**

  * 都市と路線の描画。プレイヤー/NPCマーカーの補間表示。
* **DebugPanel（res://scripts/debug_panel.gd）**

  * 日付、再生/一時停止、1日進める、都市選択、都市情報表示、プレイヤー操作（売買/移動）
  *

---

## データ仕様（CSV）

### products.csv

* `product_id`, `name`, `name_ja`, `base_price`, `carry_size`

### cities.csv

* `city_id`, `name`, `name_ja`, `province`, `note`

### routes.csv

* `from`, `to`, `days`, `toll`

### city_stock.csv

* `city_id`, `product_id`, `stock_qty`, `target_stock`, `prod_per_day`, `cons_per_day`

> 文字化け対策：UTF-8 / 全角数字→半角の掃除は `World._num()` が吸収。

---

## 経済と価格

* 都市ごとに `prod/cons/target` を持つ。
* 日次で `qty += prod - cons`（0未満は切り上げ）。
* 価格は `mult = clamp(1 + k * ((target - qty)/target), min, max)` を `base_price` に掛ける。
* 売上税 `trade_tax_rate` は販売都市の金庫へ。
* 中央価格 **mid** を需給で決定（従来どおり）。
* 都市の**売る価格（ask）**＝プレイヤー/NPCが買う価格、
  都市の**買う価格（bid）**＝プレイヤー/NPCが売る価格。
* **スプレッド**：`spread = clamp(spread_base + spread_k * shortage, min_spread, max_spread)`
  （`shortage = max(0, 1 - qty/target)`、不足ほどスプレッド拡大）
* `ask = mid * (1 + spread/2)`, `bid = mid * (1 - spread/2)`
* 税は従来どおり**売上時**に課税、都市金庫へ。
* 大量購入/売却で大幅なスプレッド拡大？

---

## カレンダー（年/月/日）

* 内部日は `world.day` の**通算日**（0起点）で保持し、セーブ/ロード互換を維持。
* 表示は **1年=12ヶ月、1ヶ月=30日（=360日）** に基づき、`day` を年月日に変換。
* 変換ヘルパ（World.gd）：

  * `get_calendar(day_idx=-1) -> {year, month, day}`
  * `format_date(day_idx=-1) -> "Y年MM月DD日"`
* 季節サイクル：既定は `year_days = 360` とし**1年で一巡**。早回ししたい場合は 120 等でも可（表示はそのまま）。
* UI：HUDの**日付表示**・ログ/ダイアログは `format_date()` を使用。

---

## 供給モデル（常時 / バースト / 季節）

> 現状の `prod_per_day` は常時生産向け。香辛料や宝飾など**継続的に生まれにくい品**は、日次生産ではなく**イベント供給**で扱う設計を追加（仕様レベル。実装は別途）。

* **常時（steady）**：いままでどおり `prod_per_day` / `cons_per_day` で日次更新。主食・素材など。
* **バースト（burst）**：一定の確率で**まとまった数量**が入荷。例：隊商到着、港に積荷。

  * ルール例（DB変更なし最小）：`world.gd` に `supply_rules` を持ち、対象 `product_id` に対して `p_base`（日次確率）、`qty_min/max` を定義。該当品の `prod_per_day=0` にしておく。
* **季節（seasonal / seasonal_burst）**：年周期 `year_days` を設け、`sin` ベースの季節係数でバーストの**確率や数量を変調**。

  * 例：`p = p_base * (0.5 + 0.5*sin(2π*(day+phase)/year_days) * amp)`
  * 都市ごとに `phase` をズラす（`city_id` のハッシュ等）ことで北南差/地域差を表現。

### デバッグと抑制

* **クールダウン**：同一 `(city,pid)` で発火したら `cooldown_days`（例: 10）を記録し、期間中は発火しない/確率半減。
* **カウント**：`supply_stats` に `by_city`, `by_pid`, `total` を日次で集計。必要に応じて月次リセット。
* **ログ**：

  * `SupplyEvent: RE0006 PR05 +14 (seasonal)`
  * `SupplyStats: day=XX total=YY by_pid={PR05:…} by_city={RE0006:…}`（デバッグ時のみ）
* **通知**：`World` → `signal supply_event(...)`。`GameHUD` は `show_supply_dialog`/`pause_on_toast` の組合せで表示・ポーズ挙動を選択（テスト時は **ダイアログOFFでポーズ無し**も可）。

---

## イベントダイス（仕様案）

### コンセプト

* **毎日**と**移動中の日次**に 1d100 を振る「判定ゲート」。出目や修正値で**イベントテーブル**から選択。
* まずは仕様のみ（実装は後続）。将来の**季節/供給**や**評判/治安**とも接続できる拡張性を重視。

### 日次イベントダイス（Daily, 1d100）

* トリガ：`step_one_day()` の末尾（価格更新・売買処理の後）。
* 対象：都市ごと／世界共通のいずれか（テーブル側で定義）。
* 判定式：`roll = d100 + city_mod + season_mod + prosperity_mod + rumor_mod`。
* 閾値例：

  * 1–5 : **凶事**（疫病/火災/税強化…価格上昇、在庫減、税率一時UP）
  * 6–15 : **悪い**（悪天候/労働争議…生産低下、通行料↑）
  * 16–85 : **なし**
  * 86–95 : **良い**（豊漁/慈善市…在庫増、税率一時DOWN）
  * 96–100: **大吉**（祭礼/隊商来訪…在庫大幅増、価格一時DOWN）
* クールダウン：同種イベントは `cooldown_days` 中は再発しにくい（重み半減 or 禁止）。

### 移動イベントダイス（Travel, 1d100）

* トリガ：**移動中**ユニット（NPC/プレイヤー）の各日 tick で判定。
* 判定式：`roll = d100 + route_hazard_mod + escort_mod + weather_mod + trait_mod`。

  * `route_hazard_mod` は路線危険度（山道/海路/荒野等）。
  * `trait_mod` は NPC の `risk/explore` を反映（高いほど**良/悪の振れ幅**が増す）。
* 例イベント：

  * **追い風/順流**：到着日短縮。
  * **盗賊/荒天**：積荷一部喪失、遅延、追加通行料。
  * **行き交う隊商**：同乗（手数料で到着日短縮）や相場情報入手（次街の価格係数に一時補正）。

### イベント効果の型（最小）

* `price_mult(city,pid,ratio,duration)` … 価格係数を一時適用（ask/bid 両方）。
* `stock_delta(city,pid,qty)` … 在庫増減。
* `funds_delta(city,amount)` … 都市金庫の増減。
* `cash_delta(actor,amount)` / `cargo_delta(actor,pid,qty)` … プレイヤー/NPCに直接。
* `delay_days(actor,days)` … 到着日の遅延/短縮。
* `tax_override(city,rate,duration)` / `toll_override(route,value,duration)` … 一時的な税/通行料変更。

### 確率・補正（例）

* **都市繁栄度/治安**：`prosperity_mod`、`security_mod`（将来導入）。
* **季節**：`season_mod`（供給モデルと一貫）。
* **ルート危険度**：`routes.csv` に将来 `hazard` 列（当面は内部テーブルでも可）。
* **連続不発補正**：何も起きない日が続くと重みを微増（退屈防止）。

### データ設計案（後日）

* **events_daily.csv / events_travel.csv**（または JSON）

  * `event_id, name_ja, severity, scope, trigger, weight or min_roll–max_roll, effect_type, effect_args(json), duration, cooldown`
* **route_props.csv（任意）**：`from,to,hazard`（危険度）。

### UI（最小）

* HUD に**イベントログ**（直近N件）。
* Map の都市ラベルに**期間ピン**（良：▲/緑、悪：▼/赤）。

### アイデア（将来）

* **保険/護衛/御守り**：悪イベントの軽減/無効化（費用は都市へ）。
* **評判/恩顧**：良イベントの発動率・効果量に影響。
* **連鎖イベント**：凶事→復興特需など、複数日に跨るストーリー化。

## 追加アイデア（ゲーム内容）

- 数量依存の市場インパクト：大量売買時は shortage/スプレッドに一時加算し、EMAに流し込みで徐々に収束。

- 価格のソフト床/天井：初心者期間は spread_base を厚め→段階的に薄くする導線。

- ライバル商人に個性と“顔”：強欲/堅実/冒険の固定NPC。ときどき契約を横取り。

- 都市繁栄度（prosperity）可視化：在庫/価格の長期EMAから指数化→Mapピン色帯や相場の重み付けに利用。

- ギルド階級と解禁：売上/達成数で積載+5、遠隔相場閲覧、ズーム解禁などを段階開放。

- 借金/利子（都市金庫が貸し手）：序盤の資金繋ぎ。返済は柔軟。

- 腐敗/劣化（軽量版）：腐りやすい品だけ日次で少量減価。短距離便の価値を上げる。

- やり過ぎ防止のクールダウン：同一商品を短期間に運び過ぎた都市の短期ペナルティ（bid↓/spread↑）。

- 行き先サジェストの多様性ノイズ：スコア同点付近に±ノイズで毎回同じルートになりにくく。

- 判断支援UIの強化：Tradeでの利益見込み（profit/day）表示、商品名右に10日スパークライン。

- NPC交流（非商人）との要素：職人/領主/聖職者/海賊などとの依頼・後援・寄進イベント。交易以外の手段で評判や都市繁栄度に影響を与える。

## NPC

* `greedy`（利益志向）, `risk`（購入予算比率）, `explore`（経路探索のノイズ）をプリセット。
* 到着直後は**売却のみ**（税は販売都市の金庫へ）。仕入れは**出発計画**で行う。
* 出発計画では、隣接都市 × 商品の候補を総当りし、**純利益 = 到着地の bid − 出発地の ask − 旅費 − 通行料** が正、かつ **相対利幅 ≥ 0.02 + 0.08×greedy + 0.05×risk** を満たすプランのみ採用。条件を満たさなければ******************************************************滞在**（価格変動を待つ）。
* `depart_same_day = true` の場合、プランがあるときのみ**同日出発**。
* 出発時に **旅費（日数×単価）** と **通行料** を支払い、両端都市に分配。

---

## プレイヤー

* `cash/cargo/cap/city/enroute/dest/arrival_day` を保持。
* UI から **買う/売る/移動** を操作可能。
* 移動時はNPC同様、旅費+通行料を即時支払い。到着は `arrival_day` で反映。
* UIは**プレイヤーの現在地/目的地を自動フォーカス**。

---

## UI/HUD（DebugPanel）

* Play/Step/都市選択、都市在庫・価格、プレイヤー/NPC概要、都市金庫。
* 起動時は**ポーズ**状態。ボタン表記は **Play**。
* プレイヤーが移動中（`enroute=true`）は売買/移動ボタンを**自動無効化**（取引不可）。

---

## 取引モード（ハブと個別画面）

* **TradeHub（新）**：`Trade` ボタンで開く**入口画面**。以下3つのモードをボタンで遷移。

  * **市場（Market）**：従来の売買画面。都市の `ask/bid/在庫` に対して **Buy/Sell/Max**。
  * **委託販売（Consignment）**：所持品を都市に預け、**日次で自動販売**。手数料/上限あり。
  * **定期市（Fair）**：開催日だけ有効になる特別マーケット。**参加料**を支払い、短期間は販売回転/来客が増える。
* **ナビ規約**：サブ画面を閉じて再度 `Trade` を押すと、常に **TradeHub に戻る**。
* **実装状況**：TradeHub と Market は動作。Consignment/Fair は**UI雛形→順次実装**。

---

## 今後の拡張（候補）

1. **プレイヤーステータス**：称号、評判、借金/利子、保険。
2. **商品属性**：腐敗（日持ち）、季節補正、禁制品、品質段階。
3. **都市金庫の使い道**：施設拡張、人口推移、価格係数、イベント発生。
4. **NPCの多様化**：特化型（穀物商/高利貸し/密輸）、協定や競合、隊商隊列。
5. **マップ拡張**：都市追加、長距離路線、分岐路。
6. **セーブ/ロード**：バージョニング、CSV差分との整合。
7. **グラフ**：価格ヒストリ可視化、在庫遷移、損益推移。

---

## バランス調整の方針

* 初期 `travel_cost_per_day` と `toll` を控えめに、**利益＞コスト**が素直に感じられる値から開始。
* `greedy/risk/explore` の分布で NPC 行動の多様性を出す。
* 都市金庫が膨らみすぎる場合は税率・通行料・旅費の係数で戻す。

---

## スプリントログ

### Sprint 1（完了）

* CSV ローダ & 変換ユーティリティ（全角→半角）
* World 基本サイクル（生産/消費/価格）
* NPC 到着・仕入・出発（同日出発）
* 都市金庫（税/旅費/通行料）
* DebugPanel & MapLayer、プレイヤー操作の最低限
* 起動時はポーズ、Play/Step、プレイヤー自動フォーカス

### Sprint 2（UI第1弾：操作の土台）

**ゴール**：デバッグから独立した“遊べるUI”を揃える。

* GameHUD 追加（Day/City/Cash/Map/Trade/Menu）
* Map 別ウインドウ化（World 参照を注入、描画更新）
* TradeWindow 追加（**買/売**・Max・移動中無効化）
* HUD から速度切替（1x/2x/4x）
* 小規模レイアウト調整（テキスト折返し、余白）

**受け入れ基準**

* 起動時は **Pause**、ボタン表記は **Play**。
* Map/Trade/Menu を **ワンボタンで開閉**できる。
* 移動中は **取引不可**（ボタン無効）である。

---

## TODO（短期）

* カレンダー導入：World に `get_calendar/format_date` を実装、HUD/ログ表示を年月日へ統一
* **TradeHub 完了**：起動/再オープン時は必ずHub表示。Market/Consignment/Fairのナビ一貫性。
* **Consignment（委託）**：所持リストの表示、委託登録/取消、日次清算、手数料反映、ログ。
* **Fair（定期市）**：`enable_fairs/fair_schedule` の仕様確定とUI活性条件、参加料、期間中の販売補正。
* GameHUD：速度切替（1x/2x/4x）とステータスの視覚化（Cash/Cap バー）
* Trade/Maket：利益プレビュー（税/旅費/通行料込み）とツールチップ
* Map：ズーム/ドラッグ、NPC凡例、ツールチップ
* 価格ヒストリの簡易チャート（都市×商品）
* 供給イベント：`cooldown_days` と `supply_stats` の可視化（DebugPanel）
* セーブ/ロード素振り（JSON 1ファイル）
* イベントダイス：暫定テーブル（2–3件）とログ出力の土台

---

## UI（ゲーム用）

### 画面構成（現行）

* **GameHUD** … 上部バーに Day / City / Cash / Menu / Map / Trade。DebugPanel の代替。
* **TradeHub** … 市場 / 委託販売 / 定期市 への入口。閉じた後は **次回もHubから開始**。
* **Market（旧TradeWindow）** … 商品選択・数量・Max・Buy/Sell。ask/bid 表示、移動中は無効化。
* **ConsignmentWindow（雛形）** … 所持品リストから委託登録。日次で自動販売（下記仕様）。
* **FairWindow（雛形）** … 開催日だけアクティブ。参加料支払い→販売回転アップ効果（下記仕様）。
* **Map** … `map_layer.gd` を別ウインドウに表示。ワールドは継続更新。
* **MenuPanel** … Trade / Map / +1 Day / Close。

### 委託販売（仕様最小）

* **登録**：都市で品目と数量を選択して委託。貨物から減算され、都市の `consignments[city][pid]` に積まれる。
* **清算**：日次で `sell_qty = clamp(alpha * cons_per_day, 1, 残量)` を上限に **都市の bid** で自動販売。
* **手数料**：売上に `consignment_commission_rate` を乗算（例 6%）。登録時に `consignment_fee_flat`（例 1）を差引。
* **表示**：委託中一覧（品/残量/昨日売上/累計）。キャンセルで引取可。
* **パラメータ**：`alpha（初期1.0）/commission_rate/fee_flat` は World の変数で調整。

### 定期市（仕様最小）

* **有効化**：`enable_fairs=true`。`fair_schedule: {city_id: ["MM-DD", ...]}`（または day-index 配列）。
* **開催判定**：`_is_fair_available_today()` が `schedule` を参照し当日なら **FairWindow ボタン活性**。
* **参加**：`entry_fee` を都市金庫へ支払い、開催期間中（当日〜数日）だけ**販売上限と回転率を補正**（`alpha_fair > alpha`）。
* **価格**：基本は都市の bid/ask。需要増補正は `seasonal_fair_mult` をスプレッド/短期在庫へ適用。

### 近々のUI改善

* TradeWindow に **利益プレビュー**（from→to を選び、税/旅費/通行料込みの純利益）
* 買付 **Max**（在庫/資金/積載の三制約）とツールチップ整備
* Map の **ズーム/ドラッグ**・凡例・ツールチップ
* GameHUD に **速度切替（1x/2x/4x）** を小さく配置

---

## 計画（ロードマップ）

### Sprint 3（UI第2弾：判断支援＋取引ハブ）

**ゴール**：プレイヤーの意思決定を支える見える化＋取引モードの分離。

* **TradeHub** を導入（Market/Consignment/Fair）
* Market：利益プレビュー（from/to/pid/qty で純利益見積）
* Map ズーム/ドラッグ、NPC色凡例、マーカーのツールチップ
* おすすめ取引（現地→隣接×商品で上位2件の提案）
* セーブ/ロードの素振り（JSON）

  * 契約（Contract）最小実装：都市が提示する納品/引取依頼（◯日以内に PRxx を ×個）。Trade に「契約」タブ追加。達成で報酬/評判、小失敗でペナルティなし。
  * ウォッチリスト/アラート：商品最大3件の監視。隣接都市への利幅が閾値超ならHUDで点灯（通知）。
  * 噂（Rumor / price_mult）：city×product×期限で bid/ask に一時係数を適用。HUDに1行表示。
  * 緊急便（救済契約）：所持金が閾値未満のとき一度だけ出る黒字確定の配達依頼。詰み防止。

### Sprint 4（供給イベントの素振り）

**ゴール**：季節/バースト供給の原型を導入（DB変更なし）。

* `supply_rules` と `_apply_supply_events()` の実装
* ログ出力・簡易チューニングUI

### Sprint 5（イベントダイス基盤）

**ゴール**：日次/移動イベントの骨格だけを入れ、効果は数種に限定。

* `roll_daily_event()` / `roll_travel_event(actor)` のフックだけ実装（効果はログ＋1–2種類）
* テーブルは暫定的にハードコード（後でCSV/JSONへ）
* クールダウン/期間の仕組みを最小で導入（メモリ上）
* HUD にイベントログ欄を追加（直近N件）

## Sprint 6（リスク系：軽量導入）

ゴール：移動リスクと選択肢の導入（足し算で遊びが増える範囲に抑える）。

* 通行許可証：特定ルートの通行料 −50%（一定日数）。`toll_override(route,value,duration)` を使用。
* 保険：移動中の悪イベントの損失を一定割合補填（商品喪失/遅延の軽減）。
* 偵察（Scout）：Travel ダイスの良イベントで「到着日短縮/情報入手」。UIは結果ログのみ。
